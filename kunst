#!/usr/bin/env bash
# ┬┌─┬ ┬┌┐┌┌─┐┌┬┐
# ├┴┐│ ││││└─┐ │
# ┴ ┴└─┘┘└┘└─┘ ┴
# Created by Siddharth Dushantha

# VERSION=1.0

COVER="/tmp/kunst.jpg"
MUSIC_DIR="~/Music/"
SIZE="250x250"

# this is a base64 endcoded image which will be used if
# if the file does not have an emmbeded album art.
# the image is a image of a music note
read -d '' MUSIC_NOTE << EOF
iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAJESURBVGhD7Zg/axRRFMVXAtpYphEVREKClnHfJI0MmReSfAC3tRejhaBgo70fwN7aD2BvEU0gfztbu5AqMxNjoVnvG87KZXy7z5m5dxLI/OCw8Pade+7M3n3Dbq+jo6OjY8RwMJhKk+hhlph3eRJ9w/LF5jCOr1PTj6jpD7mNjkjDkbDl4vFjpX87teZJlkSfSD9501zYfv5QJ1fyZHGexuJtZs12ZqMzX8NlwX4+nK3NXMutWaOm39Nd/u5rMCSUao80fjBNwY+p8Y+krNxQVaGsLsfWzFLYS2r4M30Rf5WbaCJE6OILlhIidPEFSwkRuviCpYQIXXzB1WX26bR6ky4v3OPriNCFB1YRHa079Pr6eKk/h1IFfA+WdOGBk+QeXtT0Ft3pV6e2fxf2f+AeLOnCA8tC0xv09H1xGi/cgWUi3I8lXXigEzX8u3gmWPP8JI5uYdt/w2thSRceSM0/zVfnb+CtWvB6WNJFOlC6XhDpQOl6QaQDpesFkQ6UrhdEOlC6XpA6gcPB/avumKXnxCadXHkha766tTr1GlE18CRZvEmN7nHfOMGiS5XA4mdmYg64Z5Jg06VKYHlEQoKtOVIz6zx8f0iwNUNyZt2F+3zjBFt9pGe22gWYFLb6lEckJNjGUmWEssR8ga0+0jNL9Z75fD7Rp7UOW32kZxb/1u37vFyUu+sODtjqozGzxaFADfprFM3vuD3Y3gytmf17LJPHXbgTNb5BWhe58yNan1lpWp9ZDVqdWS1am9mOjo7LRq/3B1ESKyYUVquzAAAAAElFTkSuQmCC
EOF


usage() {
	cat << EOF
Well IDK what exactly to put here.

OPTIONS
	-h		print this message and exit
	-d|--music-dir	specify music directory (path)
	-s|--size	specify size (<H>x<L>)
EOF
	exit 0
}

update_cover() {
	# extract the album art from the mp3 file and dont show the messsy
	# output of ffmpeg
	ffmpeg -i "$MUSIC_DIR/$(mpc current -f %file%)" $COVER -y &> /dev/null

	# get the status of the previous command
	STATUS="$?"

	# check if the file has a embbeded album art
	if [ $STATUS -eq 0 ];then
		echo "kunst: extracted album art"
		ARTLESS=false
	else
		echo "error: file does not have an album art"
		ARTLESS=true
		return
	fi

	# resize the image to 250x250
	convert $COVER -resize $SIZE $COVER

	echo "kunst: resized album art to $SIZE"
}

get_opts() {
	# long way; there's also getopts (builtin) and getopt (external)
	# cannot handle values attached to short options (e.g. -d~/Music)
	# consumes arguments but does nothing with unspecified options
	while (( "$#" )); do
		# handle '--long-opt=val' and '--long-opt val' via param substitution
		[[ $1 == --*=* ]] && set -- "${1%%=*}" "${1#*=}" "${@:2}"
		# remove line above for only whitespace separators
		case "$1" in
			-h|--help)
				usage
				# "shift" one argument ahead
				shift ;;
			-d|--music-dir)
				MUSIC_DIR="$2"
				shift 2 ;;
			-s|--size)
				SIZE="$2"
				shift 2 ;;
		esac
	done
}

main() {
	get_opts "$@"
	update_cover
	echo "music dir: $MUSIC_DIR"

	if [ $ARTLESS == true ];then
		# change the path to COVER because the music note
		# image is a png not jpg
		COVER="/tmp/kunst.png"

		# decode the base64 encoded image and save it
		# to /tmp/kunst.png
		base64 --decode - <<< "$MUSIC_NOTE" > "$COVER"
	fi

	echo "kunst: swapped album art to $(mpc current)"

	# display the album art using sxiv
	sxiv -g $SIZE -b $COVER -N "Kunst" &

	while true; do
		# waiting for an event from mpd; play/pause/next/previous
		# this is lets kunst use less CPU :)
		mpc idle &> /dev/null
		echo "kunst: received event from mpd"

		update_cover

		if [ $ARTLESS == true ];then
			# change the path to COVER because the music note
			# image is a png not jpg
			COVER="/tmp/kunst.png"

			# decode the base64 encoded image and save it
			# to /tmp/kunst.png
			echo "$MUSIC_NOTE" | base64 --decode > $COVER
		fi

		echo "kunst: swapped album art to $(mpc current)"
	done
}


main "$@"
